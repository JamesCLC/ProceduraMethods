////////////////////////////////////////////////////////////////////////////////
// Filename: terrain.ps
////////////////////////////////////////////////////////////////////////////////


// Slope Based Texturing code based on [http://www.rastertek.com/tertut14.html]


/////////////
// GLOBALS //
/////////////
// Slope Terrain Textures
Texture2D sandTexture  : register(t0);
Texture2D slopeTexture : register(t1);

SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	///
	float4 sandColor;
	float4 slopeColor;
	float slope;
	float blend;
	float4 textureColor = (0.0f, 0.0f, 0.0f, 1.0f);
	///
	float3 lightDir;
	float lightIntensity;
	float4 color;


	// Sample the textures
	sandColor = sandTexture.Sample(SampleType, input.tex);
	slopeColor = slopeTexture.Sample(SampleType, input.tex);

	// Calculate the slope of this point.
    slope = 1.0f - input.normal.y; 

	if (slope >= 0.7)
	{
		textureColor = slopeColor;
	}
	else if ((slope < 0.7) && (slope >0.2))
	{
		blend = (slope-0.2f) * (1.0f/(0.7 -0.2f));
		textureColor = lerp(sandColor, slopeColor, blend);

		// Sample both textures, but use one as an alpha value.

	}
	else
	{
		textureColor = sandColor;
	}

   	// Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }

    // Saturate the final light color.
    color = saturate(color);

	// Multiply the final colour by the texture colour
	color = color * textureColor;

	return color;
}