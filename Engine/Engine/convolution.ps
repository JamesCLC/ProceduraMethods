////////////////////////////////////////////////////////////////////////////////
// Filename: convolution.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer ConvolutionKernelBuffer
{
	matrix convolutionKernel;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
		float2 texCoord1 : TEXCOORD1;
		float2 texCoord2 : TEXCOORD2;
		float2 texCoord3 : TEXCOORD3;
		float2 texCoord4 : TEXCOORD4;
		float2 texCoord5 : TEXCOORD5;
		float2 texCoord6 : TEXCOORD6;
		float2 texCoord7 : TEXCOORD7;
		float2 texCoord8 : TEXCOORD8;
		float2 texCoord9 : TEXCOORD9;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ConvolutionPixelShader(PixelInputType input) : SV_TARGET
{
	float4 color;

	// Initialize the color to black.
	color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Combine the color values of the surrounding pixels using values supplied by the convolution kernel.
	color += shaderTexture.Sample(SampleType, input.texCoord1) * convolutionKernel._11;
	color += shaderTexture.Sample(SampleType, input.texCoord2) * convolutionKernel._12;
	color += shaderTexture.Sample(SampleType, input.texCoord3) * convolutionKernel._13;
	color += shaderTexture.Sample(SampleType, input.texCoord4) * convolutionKernel._21;
	color += shaderTexture.Sample(SampleType, input.texCoord5) * convolutionKernel._22;
	color += shaderTexture.Sample(SampleType, input.texCoord6) * convolutionKernel._23;
	color += shaderTexture.Sample(SampleType, input.texCoord7) * convolutionKernel._31;
	color += shaderTexture.Sample(SampleType, input.texCoord8) * convolutionKernel._32;
	color += shaderTexture.Sample(SampleType, input.texCoord9) * convolutionKernel._33;

	// Set the alpha channel to one.
	color.a = 1.0f;

    return color;
}